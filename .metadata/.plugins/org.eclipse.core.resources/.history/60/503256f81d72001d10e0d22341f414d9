package com.ntth.socialnetwork.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ntth.socialnetwork.entity.User;
import com.ntth.socialnetwork.repository.UserRepo;

@RestController
@RequestMapping("/api")
public class UserController {
	@Autowired
	private UserRepo userRepo;

	public UserController(UserRepo userRepo) {
		super();
		this.userRepo = userRepo;
	}
	
	@GetMapping("/user/all")
	Collection<User> getAllUsers() {
		return this.userRepo.findAll();
	}
	@GetMapping("/user/{id}")
	ResponseEntity<?> getCategoryById(@PathVariable("id") Long id) {
		Optional<User> user = this.userRepo.findById(id);
		return user.map(res -> ResponseEntity.ok().body(res)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
	}
	@PostMapping("/user")
	ResponseEntity<User> createCategory(@RequestBody User user) throws URISyntaxException {
	  User result= userRepo.save(user);
	  return ResponseEntity.created(new URI("/api/category" + result.getUserID())).body(result); 
	
	}
	@PutMapping("/category/{id}")
	ResponseEntity<Category> updateCategory(@Valid @RequestBody Category category){
		Category result= categoryRepo.save(category);
		return ResponseEntity.ok().body(result);
	}
	@DeleteMapping("/category/{id}")
	ResponseEntity<?> deleteCategory(@PathVariable Long id){
		categoryRepo.deleteById(id);
		return ResponseEntity.ok().build();
	}
}
